<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="ProbabilityFunctions_8h" kind="file" language="C++">
    <compoundname>ProbabilityFunctions.h</compoundname>
    <includes refid="GlobalVariables_8h" local="yes">../Main/GlobalVariables.h</includes>
    <includes refid="GlobalConstants_8h" local="yes">../Main/GlobalConstants.h</includes>
    <includes refid="DataStorage_8h" local="yes">DataStorage.h</includes>
    <includes refid="MiscFunctions_8h" local="yes">MiscFunctions.h</includes>
    <includes local="no">cmath</includes>
    <includedby refid="LogLikelihood_8h" local="yes">/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h</includedby>
    <includedby refid="LikelihoodFunctor_8h" local="yes">/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Optimizer/LikelihoodFunctor.h</includedby>
    <incdepgraph>
      <node id="11">
        <label>../libs/JSL/JSL.h</label>
      </node>
      <node id="2">
        <label>../Main/GlobalVariables.h</label>
        <link refid="GlobalVariables_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>iomanip</label>
      </node>
      <node id="14">
        <label>DataStorage.h</label>
        <link refid="DataStorage_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h</label>
        <link refid="ProbabilityFunctions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>../DataHandling/Star.h</label>
        <link refid="Star_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>cmath</label>
      </node>
      <node id="16">
        <label>string</label>
      </node>
      <node id="8">
        <label>fstream</label>
      </node>
      <node id="19">
        <label>../Optimizer/EfficiencyVector.h</label>
        <link refid="EfficiencyVector_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>../libs/Eigen/Householder</label>
      </node>
      <node id="9">
        <label>string.h</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
      <node id="18">
        <label>VariancePopulation.h</label>
        <link refid="VariancePopulation_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>../Main/GlobalConstants.h</label>
        <link refid="GlobalConstants_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>../libs/Eigen/Core</label>
      </node>
      <node id="10">
        <label>iostream</label>
      </node>
      <node id="6">
        <label>../libs/Eigen/QR</label>
      </node>
      <node id="7">
        <label>../libs/Eigen/LU</label>
      </node>
      <node id="17">
        <label>MiscFunctions.h</label>
        <link refid="MiscFunctions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h</label>
        <link refid="ProbabilityFunctions_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihoodPrior.h</label>
        <link refid="LogLikelihoodPrior_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h</label>
        <link refid="LogLikelihood_8h"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Optimizer/LikelihoodFunctor.h</label>
        <link refid="LikelihoodFunctor_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_pmf_forward</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;probs, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;result)</argsstring>
        <name>poisson_binomial_pmf_forward</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="classLogLikelihood_1a48e99798d1bad7dc63fdf2019acc1c7b" kindref="member">LogLikelihood::PoissonContribution()</ref>. Uses a truncated convolution to calculate p(K =k | probs). The implementation is heavily based on the one<verbatim>embed:rst:inline `we stole from github &lt;https://github.com/biscarri1/convpoibin/blob/master/src/convpoibin.c&gt;`_ </verbatim> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of probabilities to calculate the Poisson Binomial on. This vector has length <ref refid="GlobalConstants_8h_1a7a2781dd616d965ec2bb2df8cf652704" kindref="member">NumberLargerThanMaxObservations</ref>, to prevent continual re-initialisation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probslen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of <computeroutput>probs</computeroutput> which are initialised. Referred to as <computeroutput>n</computeroutput> in our theory work </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a matrix / vector-of-vectors used to store the output result in-place. The value of p(K = k| probs) is at element <computeroutput>[n-1][k]</computeroutput>. The rest of the object is populated with intermediary results needed to calculate the derivative of the result w.r.t. the probabilities. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="16" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="16" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1ab18da1a53be9c4718fcbda438b70586f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_pmf_backward</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;probs, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;result)</argsstring>
        <name>poisson_binomial_pmf_backward</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="classLogLikelihood_1a48e99798d1bad7dc63fdf2019acc1c7b" kindref="member">LogLikelihood::PoissonContribution()</ref>. Acts almost identically to <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref>, but the convolution happens in reverse order, therefore populating <computeroutput>result</computeroutput> with a different set of intermediary results. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of probabilities to calculate the Poisson Binomial on. This vector has length <ref refid="GlobalConstants_8h_1a7a2781dd616d965ec2bb2df8cf652704" kindref="member">NumberLargerThanMaxObservations</ref>, to prevent continual re-initialisation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probslen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of <computeroutput>probs</computeroutput> which are initialised. Referred to as <computeroutput>n</computeroutput> in our theory work </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a matrix / vector-of-vectors used to store the output result in-place. The value of p(K = k| probs) is at element <computeroutput>[k][n-1]</computeroutput>. The rest of the object is populated with intermediary results needed to calculate the derivative of the result w.r.t. the probabilities. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="24" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="24" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1afd75d17c92adef15ae23fac959929b44" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_subpmf</definition>
        <argsstring>(int m, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;pmf_forward, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;pmf_backward, std::vector&lt; double &gt; &amp;result)</argsstring>
        <name>poisson_binomial_subpmf</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>pmf_forward</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>pmf_backward</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the output of <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref> and <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref> to calculate the correct contribution to the derivative of the probabiity (needed for the gradient descent). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>An offset parameter either #PipelineMinVisists -1 , k-1 or k, depending on the properties of the star which have been observed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmf_forward</parametername>
</parameternamelist>
<parameterdescription>
<para>the output of <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmf_backward</parametername>
</parameternamelist>
<parameterdescription>
<para>the output of <ref refid="ProbabilityFunctions_8h_1ab18da1a53be9c4718fcbda438b70586f" kindref="member">poisson_binomial_pmf_backward()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector into which the results are inserted in-place </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="33" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="33" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1a86f6309231e624f956de86197020c697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_lpmf_forward</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;probs, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;result)</argsstring>
        <name>poisson_binomial_lpmf_forward</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="classLogLikelihood_1ac848d93699c16868bf4da1884fe5c45a" kindref="member">LogLikelihood::ExactPoissonContribution()</ref>. Almost identical to <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref>, but operates in log-space and has a far higher level of precision, and crucially is <bold>much slower</bold>. This should only be called when the results of the original function are in doubt (p ~1 or p~0, or result[x][y] --&gt; infty) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of probabilities to calculate the Poisson Binomial on. This vector has length <ref refid="GlobalConstants_8h_1a7a2781dd616d965ec2bb2df8cf652704" kindref="member">NumberLargerThanMaxObservations</ref>, to prevent continual re-initialisation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probslen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of <computeroutput>probs</computeroutput> which are initialised. Referred to as <computeroutput>n</computeroutput> in our theory work </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a matrix / vector-of-vectors used to store the output result in-place. The value of p(K = k| probs) is at element <computeroutput>[n-1][k]</computeroutput>. The rest of the object is populated with intermediary results needed to calculate the derivative of the result w.r.t. the probabilities. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="41" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="41" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1adf0ba186c49b1aa5a0d32c64aae31fa4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_lpmf_backward</definition>
        <argsstring>(std::vector&lt; double &gt; &amp;probs, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;result)</argsstring>
        <name>poisson_binomial_lpmf_backward</name>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>probs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called by <ref refid="classLogLikelihood_1ac848d93699c16868bf4da1884fe5c45a" kindref="member">LogLikelihood::ExactPoissonContribution()</ref>. Acts almost identically to <ref refid="ProbabilityFunctions_8h_1a86f6309231e624f956de86197020c697" kindref="member">poisson_binomial_lpmf_forward()</ref>, but the convolution happens in reverse order, therefore populating <computeroutput>result</computeroutput> with a different set of intermediary results. Again, note that this is considerably slower than <ref refid="ProbabilityFunctions_8h_1ab18da1a53be9c4718fcbda438b70586f" kindref="member">poisson_binomial_pmf_backward()</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>probs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of probabilities to calculate the Poisson Binomial on. This vector has length <ref refid="GlobalConstants_8h_1a7a2781dd616d965ec2bb2df8cf652704" kindref="member">NumberLargerThanMaxObservations</ref>, to prevent continual re-initialisation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probslen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of elements of <computeroutput>probs</computeroutput> which are initialised. Referred to as <computeroutput>n</computeroutput> in our theory work </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>A reference to a matrix / vector-of-vectors used to store the output result in-place. The value of p(K = k| probs) is at element <computeroutput>[k][n-1]</computeroutput>. The rest of the object is populated with intermediary results needed to calculate the derivative of the result w.r.t. the probabilities. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="50" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="50" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1aa49648706e9e2fe89ad930913848e545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void poisson_binomial_sublpmf</definition>
        <argsstring>(int m, int probslen, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;lpmf_forward, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;lpmf_backward, std::vector&lt; double &gt; &amp;result)</argsstring>
        <name>poisson_binomial_sublpmf</name>
        <param>
          <type>int</type>
          <declname>m</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>lpmf_forward</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>lpmf_backward</declname>
        </param>
        <param>
          <type>std::vector&lt; double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Uses the output of <ref refid="ProbabilityFunctions_8h_1a86f6309231e624f956de86197020c697" kindref="member">poisson_binomial_lpmf_forward()</ref> and <ref refid="ProbabilityFunctions_8h_1a86f6309231e624f956de86197020c697" kindref="member">poisson_binomial_lpmf_forward()</ref> to calculate the correct (exact) contribution to the derivative of the probabiity (needed for the gradient descent). <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>m</parametername>
</parameternamelist>
<parameterdescription>
<para>An offset parameter either #PipelineMinVisists -1 , k-1 or k, depending on the properties of the star which have been observed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmf_forward</parametername>
</parameternamelist>
<parameterdescription>
<para>the output of <ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmf_backward</parametername>
</parameternamelist>
<parameterdescription>
<para>the output of <ref refid="ProbabilityFunctions_8h_1ab18da1a53be9c4718fcbda438b70586f" kindref="member">poisson_binomial_pmf_backward()</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector into which the results are inserted in-place </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="59" column="7" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="59" declcolumn="7"/>
      </memberdef>
      <memberdef kind="function" id="ProbabilityFunctions_8h_1aadeaeef85d31cfc560877be3cb6c5f7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double poisson_binomial_normal_lpmf</definition>
        <argsstring>(int k, int probslen, LikelihoodData &amp;data)</argsstring>
        <name>poisson_binomial_normal_lpmf</name>
        <param>
          <type>int</type>
          <declname>k</declname>
        </param>
        <param>
          <type>int</type>
          <declname>probslen</declname>
        </param>
        <param>
          <type><ref refid="classLikelihoodData" kindref="compound">LikelihoodData</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Completely different implementation of the probabilitity model. Allows for variance away from the strictness of the PoissonBinomial (whilst still being an approximation). This is good for us as although k is from Gaia, n is estimated from ScanningLaw stuff, so might be horribly wrong: hence the inclulsion of the <ref refid="structVariancePopulation" kindref="compound">VariancePopulation</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of detections within the Gaia population for the target star </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>probslen</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of visitation of the star (called <computeroutput>n</computeroutput> in theory work) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A <ref refid="classLikelihoodData" kindref="compound">LikelihoodData</ref> object, including an initialised <ref refid="classLikelihoodData_1ac8cba3cd7ccaa7bcade1ad9590cd7e0a" kindref="member">LikelihoodData::p</ref> vector. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The probability p(K = k | p), and populates the gradient vectors <ref refid="classLikelihoodData_1ac6d1fcbd9277f3858edf5330f4ddf9ba" kindref="member">LikelihoodData::dfdp_constantN</ref>, <ref refid="classLikelihoodData_1a5778396081010881534302e7cc999b1f" kindref="member">LikelihoodData::dfdN_constantP</ref> and <ref refid="classLikelihoodData_1a2783d19e10a237046558f19a5b092b08" kindref="member">LikelihoodData::hypergradient</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" line="68" column="8" declfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h" declline="68" declcolumn="8"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Main/GlobalVariables.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../Main/GlobalConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="DataStorage_8h" kindref="compound">DataStorage.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="MiscFunctions_8h" kindref="compound">MiscFunctions.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1aaf3edde1db0b61fb8a749132f7af7219" kindref="member">poisson_binomial_pmf_forward</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/><sp/>probs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1ab18da1a53be9c4718fcbda438b70586f" kindref="member">poisson_binomial_pmf_backward</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/><sp/>probs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1afd75d17c92adef15ae23fac959929b44" kindref="member">poisson_binomial_subpmf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>pmf_forward,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>pmf_backward,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1a86f6309231e624f956de86197020c697" kindref="member">poisson_binomial_lpmf_forward</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>probs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1adf0ba186c49b1aa5a0d32c64aae31fa4" kindref="member">poisson_binomial_lpmf_backward</ref>(std::vector&lt;double&gt;<sp/>&amp;<sp/>probs,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><ref refid="ProbabilityFunctions_8h_1aa49648706e9e2fe89ad930913848e545" kindref="member">poisson_binomial_sublpmf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>lpmf_forward,<sp/>std::vector&lt;std::vector&lt;double&gt;&gt;<sp/>&amp;<sp/>lpmf_backward,<sp/>std::vector&lt;double&gt;<sp/>&amp;<sp/>result);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="ProbabilityFunctions_8h_1aadeaeef85d31cfc560877be3cb6c5f7b" kindref="member">poisson_binomial_normal_lpmf</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>probslen,<sp/><ref refid="classLikelihoodData" kindref="compound">LikelihoodData</ref><sp/>&amp;<sp/>data);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/ProbabilityFunctions.h"/>
  </compounddef>
</doxygen>
