<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="classLogLikelihood" kind="class" language="C++" prot="public">
    <compoundname>LogLikelihood</compoundname>
    <derivedcompoundref refid="classLogLikelihoodPrior" prot="public" virt="non-virtual">LogLikelihoodPrior</derivedcompoundref>
    <includes refid="LogLikelihood_8h" local="no">LogLikelihood.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classLogLikelihood_1a97ff9863958ffb93e74da07721a30cc6" prot="public" static="no" mutable="no">
        <type>double</type>
        <definition>double LogLikelihood::Value</definition>
        <argsstring></argsstring>
        <name>Value</name>
        <briefdescription>
<para>The last-calculated value of the <ref refid="classLogLikelihood_1af963f0f27156553eb1ac94355c83792b" kindref="member">Calculate()</ref> function. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="29" column="8" bodyfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" prot="public" static="no" mutable="no">
        <type>std::vector&lt; double &gt;</type>
        <definition>std::vector&lt;double&gt; LogLikelihood::Gradient</definition>
        <argsstring></argsstring>
        <name>Gradient</name>
        <briefdescription>
<para>The last-calculated gradient of the <ref refid="classLogLikelihood_1af963f0f27156553eb1ac94355c83792b" kindref="member">Calculate()</ref> function with respect to the associated <computeroutput>position</computeroutput><ndash/> this is eventually summed into <ref refid="classEfficiencyVector_1a810e0f6fba51ea2eacd3a3d986415fbc" kindref="member">EfficiencyVector::TransformedGradient</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="32" column="13" bodyfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classLogLikelihood_1a3a4e3a1d76a663bca3705b471af583cc" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int LogLikelihood::StarsUsed</definition>
        <argsstring></argsstring>
        <name>StarsUsed</name>
        <briefdescription>
<para>The number of stars within the last-called minibatch. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="35" column="5" bodyfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classLogLikelihood_1ae89760ae57fa9e0ce5ef01c2b35cf487" prot="protected" static="no" mutable="no">
        <type><ref refid="classLikelihoodData" kindref="compound">LikelihoodData</ref></type>
        <definition>LikelihoodData LogLikelihood::Data</definition>
        <argsstring></argsstring>
        <name>Data</name>
        <briefdescription>
<para>The storage for most of the Gnarly bits of this function, hides a lot of nasty stuff away in here. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="58" column="16" bodyfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classLogLikelihood_1a2dabecfc63956f1527ccda8098d63bf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>LogLikelihood::LogLikelihood</definition>
        <argsstring>(const std::vector&lt; std::vector&lt; Star &gt;&gt; &amp;data)</argsstring>
        <name>LogLikelihood</name>
        <param>
          <type>const std::vector&lt; std::vector&lt; <ref refid="classStar" kindref="compound">Star</ref> &gt;&gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Constructor function. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of <ref refid="classStar" kindref="compound">Star</ref> objects arranged according to the minibatching schedule. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1af963f0f27156553eb1ac94355c83792b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::Calculate</definition>
        <argsstring>(const EfficiencyVector &amp;position, int batchID, int effectiveBatches, int maxBatches)</argsstring>
        <name>Calculate</name>
        <param>
          <type>const <ref refid="classEfficiencyVector" kindref="compound">EfficiencyVector</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int</type>
          <declname>batchID</declname>
        </param>
        <param>
          <type>int</type>
          <declname>effectiveBatches</declname>
        </param>
        <param>
          <type>int</type>
          <declname>maxBatches</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The key function: executes a single minibatch calculation of the loglikelihood. Loops over each star and calls <ref refid="classLogLikelihood_1a03f95244f5a92714ef5d978d9f485970" kindref="member">PerStarContribution()</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>The current <ref refid="classEfficiencyVector" kindref="compound">EfficiencyVector</ref> </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>batchID</parametername>
</parameternamelist>
<parameterdescription>
<para>The minibatch to be executed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>effectiveBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>The current number of active minibatches </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>maxBatches</parametername>
</parameternamelist>
<parameterdescription>
<para>The original number of active minibatches </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Assigns the value of L to <ref refid="classLogLikelihood_1a97ff9863958ffb93e74da07721a30cc6" kindref="member">Value</ref>, and the associated gradient to <ref refid="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" kindref="member">Gradient</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="53" column="6"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classLogLikelihood_1a323459623fea6256267c9724ceea8ec9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
<para>Cleans the <ref refid="classLogLikelihood_1a97ff9863958ffb93e74da07721a30cc6" kindref="member">Value</ref> and <ref refid="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" kindref="member">Gradient</ref> to make way for a new loop. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="61" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1a03f95244f5a92714ef5d978d9f485970" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::PerStarContribution</definition>
        <argsstring>(int batchId, int starID, const EfficiencyVector &amp;position)</argsstring>
        <name>PerStarContribution</name>
        <param>
          <type>int</type>
          <declname>batchId</declname>
        </param>
        <param>
          <type>int</type>
          <declname>starID</declname>
        </param>
        <param>
          <type>const <ref refid="classEfficiencyVector" kindref="compound">EfficiencyVector</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculates the likelihood contribution of an individual star, given the proposed efficiency vector. The results are accumulated into <ref refid="classLogLikelihood_1a97ff9863958ffb93e74da07721a30cc6" kindref="member">Value</ref> and <ref refid="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" kindref="member">Gradient</ref>. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>batchId</parametername>
</parameternamelist>
<parameterdescription>
<para>the current id of the minibatch loop </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>starId</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the star within the minibatch </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
</parameternamelist>
<parameterdescription>
<para>the proposed effiency vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="68" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1a84ab748f78cdfaac5763d4cf020166ee" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::GeneratePs</definition>
        <argsstring>(const Star *candidate, const EfficiencyVector &amp;position)</argsstring>
        <name>GeneratePs</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <param>
          <type>const <ref refid="classEfficiencyVector" kindref="compound">EfficiencyVector</ref> &amp;</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a star, calculate the temporal and spatial probabilities associated with it, following<verbatim>embed:rst:inline :ref:`our probability model &lt;model&gt;` </verbatim>.<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the star being evaluated</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>position</parametername>
<parametername>the</parametername>
</parameternamelist>
<parameterdescription>
<para>current proposed efficency vector </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="71" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1ae0db177a301dbcb1ceb13575585dc2b2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::GenerateContribution</definition>
        <argsstring>(const Star *candidate)</argsstring>
        <name>GenerateContribution</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>After <ref refid="classLogLikelihood_1a84ab748f78cdfaac5763d4cf020166ee" kindref="member">GeneratePs()</ref> has produced probabilities, call either the PoissonBinomial function or the NormalApproximation<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the star being evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="75" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1a525d4693f7231cb70405af68d2c2c6e9" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::AssignGradients</definition>
        <argsstring>(const Star *candidate)</argsstring>
        <name>AssignGradients</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Translates the temporary gradients stored in <ref refid="classLogLikelihood_1ae89760ae57fa9e0ce5ef01c2b35cf487" kindref="member">Data</ref>, via the chain rule, into results appropriate for summing into <ref refid="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" kindref="member">Gradient</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="80" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1a45c146d322f6a78b760383b624df66c8" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::NormalContribution</definition>
        <argsstring>(const Star *candidate)</argsstring>
        <name>NormalContribution</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
<para>Calculates the p(k = K | {p_i}) for the NormalApproximation to the PoissonBinomial. Here {p_i} is the set of probabilities generated by <ref refid="classLogLikelihood_1a84ab748f78cdfaac5763d4cf020166ee" kindref="member">GeneratePs()</ref> and K is <ref refid="classStar_1abbd3c299046233f3e5f2cf100981e05e" kindref="member">Star::nMeasure</ref> for the candidate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the star being evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="83" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1a48e99798d1bad7dc63fdf2019acc1c7b" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::PoissonContribution</definition>
        <argsstring>(const Star *candidate)</argsstring>
        <name>PoissonContribution</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
<para>Calculates the p(k = K | {p_i}) for the PoissonBinomial, with a small truncation to the calculation. Here {p_i} is the set of probabilities generated by <ref refid="classLogLikelihood_1a84ab748f78cdfaac5763d4cf020166ee" kindref="member">GeneratePs()</ref> and K is <ref refid="classStar_1abbd3c299046233f3e5f2cf100981e05e" kindref="member">Star::nMeasure</ref> for the candidate. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the star being evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="87" column="6"/>
      </memberdef>
      <memberdef kind="function" id="classLogLikelihood_1ac848d93699c16868bf4da1884fe5c45a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void LogLikelihood::ExactPoissonContribution</definition>
        <argsstring>(const Star *candidate)</argsstring>
        <name>ExactPoissonContribution</name>
        <param>
          <type>const <ref refid="classStar" kindref="compound">Star</ref> *</type>
          <declname>candidate</declname>
        </param>
        <briefdescription>
<para>Calculates the p(k = K | {p_i}) for the PoissonBinomial, <bold>without</bold> the truncation of <ref refid="classLogLikelihood_1a48e99798d1bad7dc63fdf2019acc1c7b" kindref="member">PoissonContribution()</ref>. This is only called if one of the {p_i}s is close to zero or one, or the approximation otherwise results in a divergence. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>candidate</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to the star being evaluated </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="90" column="6"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This class holds the data and functions necessary to calculate log p(data | x), where x is the provided <ref refid="classEfficiencyVector" kindref="compound">EfficiencyVector</ref>. The majority of the guts + internal workings of the class are hidden away in the <ref refid="classLikelihoodData" kindref="compound">LikelihoodData</ref>. </para>
    </detaileddescription>
    <inheritancegraph>
      <node id="2">
        <label>LogLikelihoodPrior</label>
        <link refid="classLogLikelihoodPrior"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1">
        <label>LogLikelihood</label>
        <link refid="classLogLikelihood"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2">
        <label>LikelihoodData</label>
        <link refid="classLikelihoodData"/>
      </node>
      <node id="1">
        <label>LogLikelihood</label>
        <link refid="classLogLikelihood"/>
        <childnode refid="2" relation="usage">
          <edgelabel>Data</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" line="25" column="1" bodyfile="/home/jack/Documents/Work/GaiaCompleteness/Code/Theia/src/Likelihood/LogLikelihood.h" bodystart="24" bodyend="93"/>
    <listofallmembers>
      <member refid="classLogLikelihood_1a525d4693f7231cb70405af68d2c2c6e9" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>AssignGradients</name></member>
      <member refid="classLogLikelihood_1af963f0f27156553eb1ac94355c83792b" prot="public" virt="non-virtual"><scope>LogLikelihood</scope><name>Calculate</name></member>
      <member refid="classLogLikelihood_1ae89760ae57fa9e0ce5ef01c2b35cf487" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>Data</name></member>
      <member refid="classLogLikelihood_1ac848d93699c16868bf4da1884fe5c45a" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>ExactPoissonContribution</name></member>
      <member refid="classLogLikelihood_1ae0db177a301dbcb1ceb13575585dc2b2" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>GenerateContribution</name></member>
      <member refid="classLogLikelihood_1a84ab748f78cdfaac5763d4cf020166ee" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>GeneratePs</name></member>
      <member refid="classLogLikelihood_1af6d93b053cfdc1966318018831a849ec" prot="public" virt="non-virtual"><scope>LogLikelihood</scope><name>Gradient</name></member>
      <member refid="classLogLikelihood_1a2dabecfc63956f1527ccda8098d63bf5" prot="public" virt="non-virtual"><scope>LogLikelihood</scope><name>LogLikelihood</name></member>
      <member refid="classLogLikelihood_1a45c146d322f6a78b760383b624df66c8" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>NormalContribution</name></member>
      <member refid="classLogLikelihood_1a03f95244f5a92714ef5d978d9f485970" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>PerStarContribution</name></member>
      <member refid="classLogLikelihood_1a48e99798d1bad7dc63fdf2019acc1c7b" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>PoissonContribution</name></member>
      <member refid="classLogLikelihood_1a323459623fea6256267c9724ceea8ec9" prot="protected" virt="non-virtual"><scope>LogLikelihood</scope><name>Reset</name></member>
      <member refid="classLogLikelihood_1a3a4e3a1d76a663bca3705b471af583cc" prot="public" virt="non-virtual"><scope>LogLikelihood</scope><name>StarsUsed</name></member>
      <member refid="classLogLikelihood_1a97ff9863958ffb93e74da07721a30cc6" prot="public" virt="non-virtual"><scope>LogLikelihood</scope><name>Value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
